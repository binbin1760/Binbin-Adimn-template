/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: object.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class CosResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        credentials?: CosCredentials;
        requestId?: string;
        expiration?: string;
        startTime?: number;
        expiredTime?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("credentials" in data && data.credentials != undefined) {
                this.credentials = data.credentials;
            }
            if ("requestId" in data && data.requestId != undefined) {
                this.requestId = data.requestId;
            }
            if ("expiration" in data && data.expiration != undefined) {
                this.expiration = data.expiration;
            }
            if ("startTime" in data && data.startTime != undefined) {
                this.startTime = data.startTime;
            }
            if ("expiredTime" in data && data.expiredTime != undefined) {
                this.expiredTime = data.expiredTime;
            }
        }
    }
    get credentials() {
        return pb_1.Message.getWrapperField(this, CosCredentials, 1) as CosCredentials;
    }
    set credentials(value: CosCredentials) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasCredentials() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get requestId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set requestId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get expiration() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set expiration(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get startTime() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set startTime(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get expiredTime() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set expiredTime(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        credentials?: ReturnType<typeof CosCredentials.prototype.toObject>;
        requestId?: string;
        expiration?: string;
        startTime?: number;
        expiredTime?: number;
    }): CosResponse {
        const message = new CosResponse({});
        if (data.credentials != null) {
            message.credentials = CosCredentials.fromObject(data.credentials);
        }
        if (data.requestId != null) {
            message.requestId = data.requestId;
        }
        if (data.expiration != null) {
            message.expiration = data.expiration;
        }
        if (data.startTime != null) {
            message.startTime = data.startTime;
        }
        if (data.expiredTime != null) {
            message.expiredTime = data.expiredTime;
        }
        return message;
    }
    toObject() {
        const data: {
            credentials?: ReturnType<typeof CosCredentials.prototype.toObject>;
            requestId?: string;
            expiration?: string;
            startTime?: number;
            expiredTime?: number;
        } = {};
        if (this.credentials != null) {
            data.credentials = this.credentials.toObject();
        }
        if (this.requestId != null) {
            data.requestId = this.requestId;
        }
        if (this.expiration != null) {
            data.expiration = this.expiration;
        }
        if (this.startTime != null) {
            data.startTime = this.startTime;
        }
        if (this.expiredTime != null) {
            data.expiredTime = this.expiredTime;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasCredentials)
            writer.writeMessage(1, this.credentials, () => this.credentials.serialize(writer));
        if (this.requestId.length)
            writer.writeString(2, this.requestId);
        if (this.expiration.length)
            writer.writeString(3, this.expiration);
        if (this.startTime != 0)
            writer.writeUint64(4, this.startTime);
        if (this.expiredTime != 0)
            writer.writeUint64(5, this.expiredTime);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CosResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CosResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.credentials, () => message.credentials = CosCredentials.deserialize(reader));
                    break;
                case 2:
                    message.requestId = reader.readString();
                    break;
                case 3:
                    message.expiration = reader.readString();
                    break;
                case 4:
                    message.startTime = reader.readUint64();
                    break;
                case 5:
                    message.expiredTime = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CosResponse {
        return CosResponse.deserialize(bytes);
    }
}
export class CosCredentials extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tmpSecretId?: string;
        tmpSecretKey?: string;
        sessionToken?: string;
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tmpSecretId" in data && data.tmpSecretId != undefined) {
                this.tmpSecretId = data.tmpSecretId;
            }
            if ("tmpSecretKey" in data && data.tmpSecretKey != undefined) {
                this.tmpSecretKey = data.tmpSecretKey;
            }
            if ("sessionToken" in data && data.sessionToken != undefined) {
                this.sessionToken = data.sessionToken;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get tmpSecretId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set tmpSecretId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get tmpSecretKey() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set tmpSecretKey(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get sessionToken() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set sessionToken(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        tmpSecretId?: string;
        tmpSecretKey?: string;
        sessionToken?: string;
        token?: string;
    }): CosCredentials {
        const message = new CosCredentials({});
        if (data.tmpSecretId != null) {
            message.tmpSecretId = data.tmpSecretId;
        }
        if (data.tmpSecretKey != null) {
            message.tmpSecretKey = data.tmpSecretKey;
        }
        if (data.sessionToken != null) {
            message.sessionToken = data.sessionToken;
        }
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            tmpSecretId?: string;
            tmpSecretKey?: string;
            sessionToken?: string;
            token?: string;
        } = {};
        if (this.tmpSecretId != null) {
            data.tmpSecretId = this.tmpSecretId;
        }
        if (this.tmpSecretKey != null) {
            data.tmpSecretKey = this.tmpSecretKey;
        }
        if (this.sessionToken != null) {
            data.sessionToken = this.sessionToken;
        }
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.tmpSecretId.length)
            writer.writeString(1, this.tmpSecretId);
        if (this.tmpSecretKey.length)
            writer.writeString(2, this.tmpSecretKey);
        if (this.sessionToken.length)
            writer.writeString(3, this.sessionToken);
        if (this.token.length)
            writer.writeString(4, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CosCredentials {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CosCredentials();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.tmpSecretId = reader.readString();
                    break;
                case 2:
                    message.tmpSecretKey = reader.readString();
                    break;
                case 3:
                    message.sessionToken = reader.readString();
                    break;
                case 4:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CosCredentials {
        return CosCredentials.deserialize(bytes);
    }
}
