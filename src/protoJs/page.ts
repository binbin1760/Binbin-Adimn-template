/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: page.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
// @ts-nocheck
import * as dependency_1 from "./enums";
import * as pb_1 from "google-protobuf";
export class PagerRequest extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          pageNumber?: number;
          pageSize?: number;
          sorts?: Sort[];
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [3],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("pageNumber" in data && data.pageNumber != undefined) {
        this.pageNumber = data.pageNumber;
      }
      if ("pageSize" in data && data.pageSize != undefined) {
        this.pageSize = data.pageSize;
      }
      if ("sorts" in data && data.sorts != undefined) {
        this.sorts = data.sorts;
      }
    }
  }
  get pageNumber() {
    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
  }
  set pageNumber(value: number) {
    pb_1.Message.setField(this, 1, value);
  }
  get pageSize() {
    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
  }
  set pageSize(value: number) {
    pb_1.Message.setField(this, 2, value);
  }
  get sorts() {
    return pb_1.Message.getRepeatedWrapperField(this, Sort, 3) as Sort[];
  }
  set sorts(value: Sort[]) {
    pb_1.Message.setRepeatedWrapperField(this, 3, value);
  }
  static fromObject(data: {
    pageNumber?: number;
    pageSize?: number;
    sorts?: ReturnType<typeof Sort.prototype.toObject>[];
  }): PagerRequest {
    const message = new PagerRequest({});
    if (data.pageNumber != null) {
      message.pageNumber = data.pageNumber;
    }
    if (data.pageSize != null) {
      message.pageSize = data.pageSize;
    }
    if (data.sorts != null) {
      message.sorts = data.sorts.map((item) => Sort.fromObject(item));
    }
    return message;
  }
  toObject() {
    const data: {
      pageNumber?: number;
      pageSize?: number;
      sorts?: ReturnType<typeof Sort.prototype.toObject>[];
    } = {};
    if (this.pageNumber != null) {
      data.pageNumber = this.pageNumber;
    }
    if (this.pageSize != null) {
      data.pageSize = this.pageSize;
    }
    if (this.sorts != null) {
      data.sorts = this.sorts.map((item: Sort) => item.toObject());
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.pageNumber != 0) writer.writeUint32(1, this.pageNumber);
    if (this.pageSize != 0) writer.writeUint32(2, this.pageSize);
    if (this.sorts.length)
      writer.writeRepeatedMessage(3, this.sorts, (item: Sort) =>
        item.serialize(writer)
      );
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PagerRequest {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new PagerRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.pageNumber = reader.readUint32();
          break;
        case 2:
          message.pageSize = reader.readUint32();
          break;
        case 3:
          reader.readMessage(message.sorts, () =>
            pb_1.Message.addToRepeatedWrapperField(
              message,
              3,
              Sort.deserialize(reader),
              Sort
            )
          );
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): PagerRequest {
    return PagerRequest.deserialize(bytes);
  }
}
export class PagerResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          pageNumber?: number;
          pageSize?: number;
          total?: number;
          sorts?: Sort[];
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [4],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("pageNumber" in data && data.pageNumber != undefined) {
        this.pageNumber = data.pageNumber;
      }
      if ("pageSize" in data && data.pageSize != undefined) {
        this.pageSize = data.pageSize;
      }
      if ("total" in data && data.total != undefined) {
        this.total = data.total;
      }
      if ("sorts" in data && data.sorts != undefined) {
        this.sorts = data.sorts;
      }
    }
  }
  get pageNumber() {
    return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
  }
  set pageNumber(value: number) {
    pb_1.Message.setField(this, 1, value);
  }
  get pageSize() {
    return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
  }
  set pageSize(value: number) {
    pb_1.Message.setField(this, 2, value);
  }
  get total() {
    return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
  }
  set total(value: number) {
    pb_1.Message.setField(this, 3, value);
  }
  get sorts() {
    return pb_1.Message.getRepeatedWrapperField(this, Sort, 4) as Sort[];
  }
  set sorts(value: Sort[]) {
    pb_1.Message.setRepeatedWrapperField(this, 4, value);
  }
  static fromObject(data: {
    pageNumber?: number;
    pageSize?: number;
    total?: number;
    sorts?: ReturnType<typeof Sort.prototype.toObject>[];
  }): PagerResponse {
    const message = new PagerResponse({});
    if (data.pageNumber != null) {
      message.pageNumber = data.pageNumber;
    }
    if (data.pageSize != null) {
      message.pageSize = data.pageSize;
    }
    if (data.total != null) {
      message.total = data.total;
    }
    if (data.sorts != null) {
      message.sorts = data.sorts.map((item) => Sort.fromObject(item));
    }
    return message;
  }
  toObject() {
    const data: {
      pageNumber?: number;
      pageSize?: number;
      total?: number;
      sorts?: ReturnType<typeof Sort.prototype.toObject>[];
    } = {};
    if (this.pageNumber != null) {
      data.pageNumber = this.pageNumber;
    }
    if (this.pageSize != null) {
      data.pageSize = this.pageSize;
    }
    if (this.total != null) {
      data.total = this.total;
    }
    if (this.sorts != null) {
      data.sorts = this.sorts.map((item: Sort) => item.toObject());
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.pageNumber != 0) writer.writeUint32(1, this.pageNumber);
    if (this.pageSize != 0) writer.writeUint32(2, this.pageSize);
    if (this.total != 0) writer.writeUint64(3, this.total);
    if (this.sorts.length)
      writer.writeRepeatedMessage(4, this.sorts, (item: Sort) =>
        item.serialize(writer)
      );
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PagerResponse {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new PagerResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.pageNumber = reader.readUint32();
          break;
        case 2:
          message.pageSize = reader.readUint32();
          break;
        case 3:
          message.total = reader.readUint64();
          break;
        case 4:
          reader.readMessage(message.sorts, () =>
            pb_1.Message.addToRepeatedWrapperField(
              message,
              4,
              Sort.deserialize(reader),
              Sort
            )
          );
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): PagerResponse {
    return PagerResponse.deserialize(bytes);
  }
}
export class Sort extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          property?: string;
          direction?: dependency_1.Direction;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("property" in data && data.property != undefined) {
        this.property = data.property;
      }
      if ("direction" in data && data.direction != undefined) {
        this.direction = data.direction;
      }
    }
  }
  get property() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set property(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get direction() {
    return pb_1.Message.getFieldWithDefault(
      this,
      2,
      dependency_1.Direction._Direction_UNSPECIFIED
    ) as dependency_1.Direction;
  }
  set direction(value: dependency_1.Direction) {
    pb_1.Message.setField(this, 2, value);
  }
  static fromObject(data: {
    property?: string;
    direction?: dependency_1.Direction;
  }): Sort {
    const message = new Sort({});
    if (data.property != null) {
      message.property = data.property;
    }
    if (data.direction != null) {
      message.direction = data.direction;
    }
    return message;
  }
  toObject() {
    const data: {
      property?: string;
      direction?: dependency_1.Direction;
    } = {};
    if (this.property != null) {
      data.property = this.property;
    }
    if (this.direction != null) {
      data.direction = this.direction;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.property.length) writer.writeString(1, this.property);
    if (this.direction != dependency_1.Direction._Direction_UNSPECIFIED)
      writer.writeEnum(2, this.direction);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Sort {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new Sort();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.property = reader.readString();
          break;
        case 2:
          message.direction = reader.readEnum();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): Sort {
    return Sort.deserialize(bytes);
  }
}
