/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: merchant.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./enums";
import * as dependency_2 from "./payload";
import * as pb_1 from "google-protobuf";
export class MerchantViewModel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: string;
        name?: string;
        description?: string;
        address?: MerchantAddressModel;
        phoneNumber?: string[];
        doorNumber?: string;
        businessLicense?: dependency_2.MediaMetaModel;
        identityDocuments?: dependency_2.MediaMetaModel[];
        theme?: dependency_2.MediaMetaModel;
        screenshots?: dependency_2.MediaMetaModel[];
        businessHours?: BusinessHourModel[];
        stat?: dependency_1.ApprovalStat;
        approvalDisableReason?: string;
        businessTags?: string[];
        rating?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5, 8, 10, 11, 14], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("description" in data && data.description != undefined) {
                this.description = data.description;
            }
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("phoneNumber" in data && data.phoneNumber != undefined) {
                this.phoneNumber = data.phoneNumber;
            }
            if ("doorNumber" in data && data.doorNumber != undefined) {
                this.doorNumber = data.doorNumber;
            }
            if ("businessLicense" in data && data.businessLicense != undefined) {
                this.businessLicense = data.businessLicense;
            }
            if ("identityDocuments" in data && data.identityDocuments != undefined) {
                this.identityDocuments = data.identityDocuments;
            }
            if ("theme" in data && data.theme != undefined) {
                this.theme = data.theme;
            }
            if ("screenshots" in data && data.screenshots != undefined) {
                this.screenshots = data.screenshots;
            }
            if ("businessHours" in data && data.businessHours != undefined) {
                this.businessHours = data.businessHours;
            }
            if ("stat" in data && data.stat != undefined) {
                this.stat = data.stat;
            }
            if ("approvalDisableReason" in data && data.approvalDisableReason != undefined) {
                this.approvalDisableReason = data.approvalDisableReason;
            }
            if ("businessTags" in data && data.businessTags != undefined) {
                this.businessTags = data.businessTags;
            }
            if ("rating" in data && data.rating != undefined) {
                this.rating = data.rating;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get description() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set description(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get address() {
        return pb_1.Message.getWrapperField(this, MerchantAddressModel, 4) as MerchantAddressModel;
    }
    set address(value: MerchantAddressModel) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get hasAddress() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get phoneNumber() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
    }
    set phoneNumber(value: string[]) {
        pb_1.Message.setField(this, 5, value);
    }
    get doorNumber() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set doorNumber(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get businessLicense() {
        return pb_1.Message.getWrapperField(this, dependency_2.MediaMetaModel, 7) as dependency_2.MediaMetaModel;
    }
    set businessLicense(value: dependency_2.MediaMetaModel) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get hasBusinessLicense() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get identityDocuments() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.MediaMetaModel, 8) as dependency_2.MediaMetaModel[];
    }
    set identityDocuments(value: dependency_2.MediaMetaModel[]) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get theme() {
        return pb_1.Message.getWrapperField(this, dependency_2.MediaMetaModel, 9) as dependency_2.MediaMetaModel;
    }
    set theme(value: dependency_2.MediaMetaModel) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get hasTheme() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get screenshots() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.MediaMetaModel, 10) as dependency_2.MediaMetaModel[];
    }
    set screenshots(value: dependency_2.MediaMetaModel[]) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    get businessHours() {
        return pb_1.Message.getRepeatedWrapperField(this, BusinessHourModel, 11) as BusinessHourModel[];
    }
    set businessHours(value: BusinessHourModel[]) {
        pb_1.Message.setRepeatedWrapperField(this, 11, value);
    }
    get stat() {
        return pb_1.Message.getFieldWithDefault(this, 12, dependency_1.ApprovalStat._ApprovalStat_UNSPECIFIED) as dependency_1.ApprovalStat;
    }
    set stat(value: dependency_1.ApprovalStat) {
        pb_1.Message.setField(this, 12, value);
    }
    get approvalDisableReason() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set approvalDisableReason(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get businessTags() {
        return pb_1.Message.getFieldWithDefault(this, 14, []) as string[];
    }
    set businessTags(value: string[]) {
        pb_1.Message.setField(this, 14, value);
    }
    get rating() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set rating(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        description?: string;
        address?: ReturnType<typeof MerchantAddressModel.prototype.toObject>;
        phoneNumber?: string[];
        doorNumber?: string;
        businessLicense?: ReturnType<typeof dependency_2.MediaMetaModel.prototype.toObject>;
        identityDocuments?: ReturnType<typeof dependency_2.MediaMetaModel.prototype.toObject>[];
        theme?: ReturnType<typeof dependency_2.MediaMetaModel.prototype.toObject>;
        screenshots?: ReturnType<typeof dependency_2.MediaMetaModel.prototype.toObject>[];
        businessHours?: ReturnType<typeof BusinessHourModel.prototype.toObject>[];
        stat?: dependency_1.ApprovalStat;
        approvalDisableReason?: string;
        businessTags?: string[];
        rating?: number;
    }): MerchantViewModel {
        const message = new MerchantViewModel({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.description != null) {
            message.description = data.description;
        }
        if (data.address != null) {
            message.address = MerchantAddressModel.fromObject(data.address);
        }
        if (data.phoneNumber != null) {
            message.phoneNumber = data.phoneNumber;
        }
        if (data.doorNumber != null) {
            message.doorNumber = data.doorNumber;
        }
        if (data.businessLicense != null) {
            message.businessLicense = dependency_2.MediaMetaModel.fromObject(data.businessLicense);
        }
        if (data.identityDocuments != null) {
            message.identityDocuments = data.identityDocuments.map(item => dependency_2.MediaMetaModel.fromObject(item));
        }
        if (data.theme != null) {
            message.theme = dependency_2.MediaMetaModel.fromObject(data.theme);
        }
        if (data.screenshots != null) {
            message.screenshots = data.screenshots.map(item => dependency_2.MediaMetaModel.fromObject(item));
        }
        if (data.businessHours != null) {
            message.businessHours = data.businessHours.map(item => BusinessHourModel.fromObject(item));
        }
        if (data.stat != null) {
            message.stat = data.stat;
        }
        if (data.approvalDisableReason != null) {
            message.approvalDisableReason = data.approvalDisableReason;
        }
        if (data.businessTags != null) {
            message.businessTags = data.businessTags;
        }
        if (data.rating != null) {
            message.rating = data.rating;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            description?: string;
            address?: ReturnType<typeof MerchantAddressModel.prototype.toObject>;
            phoneNumber?: string[];
            doorNumber?: string;
            businessLicense?: ReturnType<typeof dependency_2.MediaMetaModel.prototype.toObject>;
            identityDocuments?: ReturnType<typeof dependency_2.MediaMetaModel.prototype.toObject>[];
            theme?: ReturnType<typeof dependency_2.MediaMetaModel.prototype.toObject>;
            screenshots?: ReturnType<typeof dependency_2.MediaMetaModel.prototype.toObject>[];
            businessHours?: ReturnType<typeof BusinessHourModel.prototype.toObject>[];
            stat?: dependency_1.ApprovalStat;
            approvalDisableReason?: string;
            businessTags?: string[];
            rating?: number;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.description != null) {
            data.description = this.description;
        }
        if (this.address != null) {
            data.address = this.address.toObject();
        }
        if (this.phoneNumber != null) {
            data.phoneNumber = this.phoneNumber;
        }
        if (this.doorNumber != null) {
            data.doorNumber = this.doorNumber;
        }
        if (this.businessLicense != null) {
            data.businessLicense = this.businessLicense.toObject();
        }
        if (this.identityDocuments != null) {
            data.identityDocuments = this.identityDocuments.map((item: dependency_2.MediaMetaModel) => item.toObject());
        }
        if (this.theme != null) {
            data.theme = this.theme.toObject();
        }
        if (this.screenshots != null) {
            data.screenshots = this.screenshots.map((item: dependency_2.MediaMetaModel) => item.toObject());
        }
        if (this.businessHours != null) {
            data.businessHours = this.businessHours.map((item: BusinessHourModel) => item.toObject());
        }
        if (this.stat != null) {
            data.stat = this.stat;
        }
        if (this.approvalDisableReason != null) {
            data.approvalDisableReason = this.approvalDisableReason;
        }
        if (this.businessTags != null) {
            data.businessTags = this.businessTags;
        }
        if (this.rating != null) {
            data.rating = this.rating;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id.length)
            writer.writeString(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.description.length)
            writer.writeString(3, this.description);
        if (this.hasAddress)
            writer.writeMessage(4, this.address, () => this.address.serialize(writer));
        if (this.phoneNumber.length)
            writer.writeRepeatedString(5, this.phoneNumber);
        if (this.doorNumber.length)
            writer.writeString(6, this.doorNumber);
        if (this.hasBusinessLicense)
            writer.writeMessage(7, this.businessLicense, () => this.businessLicense.serialize(writer));
        if (this.identityDocuments.length)
            writer.writeRepeatedMessage(8, this.identityDocuments, (item: dependency_2.MediaMetaModel) => item.serialize(writer));
        if (this.hasTheme)
            writer.writeMessage(9, this.theme, () => this.theme.serialize(writer));
        if (this.screenshots.length)
            writer.writeRepeatedMessage(10, this.screenshots, (item: dependency_2.MediaMetaModel) => item.serialize(writer));
        if (this.businessHours.length)
            writer.writeRepeatedMessage(11, this.businessHours, (item: BusinessHourModel) => item.serialize(writer));
        if (this.stat != dependency_1.ApprovalStat._ApprovalStat_UNSPECIFIED)
            writer.writeEnum(12, this.stat);
        if (this.approvalDisableReason.length)
            writer.writeString(13, this.approvalDisableReason);
        if (this.businessTags.length)
            writer.writeRepeatedString(14, this.businessTags);
        if (this.rating != 0)
            writer.writeFloat(15, this.rating);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MerchantViewModel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MerchantViewModel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.description = reader.readString();
                    break;
                case 4:
                    reader.readMessage(message.address, () => message.address = MerchantAddressModel.deserialize(reader));
                    break;
                case 5:
                    pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                    break;
                case 6:
                    message.doorNumber = reader.readString();
                    break;
                case 7:
                    reader.readMessage(message.businessLicense, () => message.businessLicense = dependency_2.MediaMetaModel.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.identityDocuments, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_2.MediaMetaModel.deserialize(reader), dependency_2.MediaMetaModel));
                    break;
                case 9:
                    reader.readMessage(message.theme, () => message.theme = dependency_2.MediaMetaModel.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.screenshots, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_2.MediaMetaModel.deserialize(reader), dependency_2.MediaMetaModel));
                    break;
                case 11:
                    reader.readMessage(message.businessHours, () => pb_1.Message.addToRepeatedWrapperField(message, 11, BusinessHourModel.deserialize(reader), BusinessHourModel));
                    break;
                case 12:
                    message.stat = reader.readEnum();
                    break;
                case 13:
                    message.approvalDisableReason = reader.readString();
                    break;
                case 14:
                    pb_1.Message.addToRepeatedField(message, 14, reader.readString());
                    break;
                case 15:
                    message.rating = reader.readFloat();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MerchantViewModel {
        return MerchantViewModel.deserialize(bytes);
    }
}
export class MerchantAddressModel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        country?: string;
        province?: string;
        city?: string;
        district?: string;
        street?: string;
        latitude?: number;
        longitude?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("country" in data && data.country != undefined) {
                this.country = data.country;
            }
            if ("province" in data && data.province != undefined) {
                this.province = data.province;
            }
            if ("city" in data && data.city != undefined) {
                this.city = data.city;
            }
            if ("district" in data && data.district != undefined) {
                this.district = data.district;
            }
            if ("street" in data && data.street != undefined) {
                this.street = data.street;
            }
            if ("latitude" in data && data.latitude != undefined) {
                this.latitude = data.latitude;
            }
            if ("longitude" in data && data.longitude != undefined) {
                this.longitude = data.longitude;
            }
        }
    }
    get country() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set country(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get province() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set province(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get city() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set city(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get district() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set district(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get street() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set street(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get latitude() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set latitude(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get longitude() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set longitude(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        country?: string;
        province?: string;
        city?: string;
        district?: string;
        street?: string;
        latitude?: number;
        longitude?: number;
    }): MerchantAddressModel {
        const message = new MerchantAddressModel({});
        if (data.country != null) {
            message.country = data.country;
        }
        if (data.province != null) {
            message.province = data.province;
        }
        if (data.city != null) {
            message.city = data.city;
        }
        if (data.district != null) {
            message.district = data.district;
        }
        if (data.street != null) {
            message.street = data.street;
        }
        if (data.latitude != null) {
            message.latitude = data.latitude;
        }
        if (data.longitude != null) {
            message.longitude = data.longitude;
        }
        return message;
    }
    toObject() {
        const data: {
            country?: string;
            province?: string;
            city?: string;
            district?: string;
            street?: string;
            latitude?: number;
            longitude?: number;
        } = {};
        if (this.country != null) {
            data.country = this.country;
        }
        if (this.province != null) {
            data.province = this.province;
        }
        if (this.city != null) {
            data.city = this.city;
        }
        if (this.district != null) {
            data.district = this.district;
        }
        if (this.street != null) {
            data.street = this.street;
        }
        if (this.latitude != null) {
            data.latitude = this.latitude;
        }
        if (this.longitude != null) {
            data.longitude = this.longitude;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.country.length)
            writer.writeString(1, this.country);
        if (this.province.length)
            writer.writeString(2, this.province);
        if (this.city.length)
            writer.writeString(3, this.city);
        if (this.district.length)
            writer.writeString(4, this.district);
        if (this.street.length)
            writer.writeString(5, this.street);
        if (this.latitude != 0)
            writer.writeDouble(6, this.latitude);
        if (this.longitude != 0)
            writer.writeDouble(7, this.longitude);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MerchantAddressModel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MerchantAddressModel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.country = reader.readString();
                    break;
                case 2:
                    message.province = reader.readString();
                    break;
                case 3:
                    message.city = reader.readString();
                    break;
                case 4:
                    message.district = reader.readString();
                    break;
                case 5:
                    message.street = reader.readString();
                    break;
                case 6:
                    message.latitude = reader.readDouble();
                    break;
                case 7:
                    message.longitude = reader.readDouble();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MerchantAddressModel {
        return MerchantAddressModel.deserialize(bytes);
    }
}
export class BusinessHourModel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        dayOfWeek?: number;
        openingTime?: LocalTimeModel;
        closingTime?: LocalTimeModel;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dayOfWeek" in data && data.dayOfWeek != undefined) {
                this.dayOfWeek = data.dayOfWeek;
            }
            if ("openingTime" in data && data.openingTime != undefined) {
                this.openingTime = data.openingTime;
            }
            if ("closingTime" in data && data.closingTime != undefined) {
                this.closingTime = data.closingTime;
            }
        }
    }
    get dayOfWeek() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set dayOfWeek(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get openingTime() {
        return pb_1.Message.getWrapperField(this, LocalTimeModel, 2) as LocalTimeModel;
    }
    set openingTime(value: LocalTimeModel) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get hasOpeningTime() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get closingTime() {
        return pb_1.Message.getWrapperField(this, LocalTimeModel, 3) as LocalTimeModel;
    }
    set closingTime(value: LocalTimeModel) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get hasClosingTime() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        dayOfWeek?: number;
        openingTime?: ReturnType<typeof LocalTimeModel.prototype.toObject>;
        closingTime?: ReturnType<typeof LocalTimeModel.prototype.toObject>;
    }): BusinessHourModel {
        const message = new BusinessHourModel({});
        if (data.dayOfWeek != null) {
            message.dayOfWeek = data.dayOfWeek;
        }
        if (data.openingTime != null) {
            message.openingTime = LocalTimeModel.fromObject(data.openingTime);
        }
        if (data.closingTime != null) {
            message.closingTime = LocalTimeModel.fromObject(data.closingTime);
        }
        return message;
    }
    toObject() {
        const data: {
            dayOfWeek?: number;
            openingTime?: ReturnType<typeof LocalTimeModel.prototype.toObject>;
            closingTime?: ReturnType<typeof LocalTimeModel.prototype.toObject>;
        } = {};
        if (this.dayOfWeek != null) {
            data.dayOfWeek = this.dayOfWeek;
        }
        if (this.openingTime != null) {
            data.openingTime = this.openingTime.toObject();
        }
        if (this.closingTime != null) {
            data.closingTime = this.closingTime.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.dayOfWeek != 0)
            writer.writeUint32(1, this.dayOfWeek);
        if (this.hasOpeningTime)
            writer.writeMessage(2, this.openingTime, () => this.openingTime.serialize(writer));
        if (this.hasClosingTime)
            writer.writeMessage(3, this.closingTime, () => this.closingTime.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BusinessHourModel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BusinessHourModel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.dayOfWeek = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.openingTime, () => message.openingTime = LocalTimeModel.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.closingTime, () => message.closingTime = LocalTimeModel.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BusinessHourModel {
        return BusinessHourModel.deserialize(bytes);
    }
}
export class LocalTimeModel extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        hour?: number;
        minute?: number;
        second?: number;
        nanoOfSecond?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("hour" in data && data.hour != undefined) {
                this.hour = data.hour;
            }
            if ("minute" in data && data.minute != undefined) {
                this.minute = data.minute;
            }
            if ("second" in data && data.second != undefined) {
                this.second = data.second;
            }
            if ("nanoOfSecond" in data && data.nanoOfSecond != undefined) {
                this.nanoOfSecond = data.nanoOfSecond;
            }
        }
    }
    get hour() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set hour(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get minute() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set minute(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get second() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set second(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get nanoOfSecond() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set nanoOfSecond(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        hour?: number;
        minute?: number;
        second?: number;
        nanoOfSecond?: number;
    }): LocalTimeModel {
        const message = new LocalTimeModel({});
        if (data.hour != null) {
            message.hour = data.hour;
        }
        if (data.minute != null) {
            message.minute = data.minute;
        }
        if (data.second != null) {
            message.second = data.second;
        }
        if (data.nanoOfSecond != null) {
            message.nanoOfSecond = data.nanoOfSecond;
        }
        return message;
    }
    toObject() {
        const data: {
            hour?: number;
            minute?: number;
            second?: number;
            nanoOfSecond?: number;
        } = {};
        if (this.hour != null) {
            data.hour = this.hour;
        }
        if (this.minute != null) {
            data.minute = this.minute;
        }
        if (this.second != null) {
            data.second = this.second;
        }
        if (this.nanoOfSecond != null) {
            data.nanoOfSecond = this.nanoOfSecond;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hour != 0)
            writer.writeUint32(1, this.hour);
        if (this.minute != 0)
            writer.writeUint32(2, this.minute);
        if (this.second != 0)
            writer.writeUint32(3, this.second);
        if (this.nanoOfSecond != 0)
            writer.writeUint64(4, this.nanoOfSecond);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LocalTimeModel {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LocalTimeModel();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.hour = reader.readUint32();
                    break;
                case 2:
                    message.minute = reader.readUint32();
                    break;
                case 3:
                    message.second = reader.readUint32();
                    break;
                case 4:
                    message.nanoOfSecond = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LocalTimeModel {
        return LocalTimeModel.deserialize(bytes);
    }
}
export class UpdateMerchantOnlineRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        isOnline?: number;
        reason?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("isOnline" in data && data.isOnline != undefined) {
                this.isOnline = data.isOnline;
            }
            if ("reason" in data && data.reason != undefined) {
                this.reason = data.reason;
            }
        }
    }
    get isOnline() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set isOnline(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get reason() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set reason(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        isOnline?: number;
        reason?: string;
    }): UpdateMerchantOnlineRequest {
        const message = new UpdateMerchantOnlineRequest({});
        if (data.isOnline != null) {
            message.isOnline = data.isOnline;
        }
        if (data.reason != null) {
            message.reason = data.reason;
        }
        return message;
    }
    toObject() {
        const data: {
            isOnline?: number;
            reason?: string;
        } = {};
        if (this.isOnline != null) {
            data.isOnline = this.isOnline;
        }
        if (this.reason != null) {
            data.reason = this.reason;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.isOnline != 0)
            writer.writeUint32(1, this.isOnline);
        if (this.reason.length)
            writer.writeString(2, this.reason);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateMerchantOnlineRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateMerchantOnlineRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.isOnline = reader.readUint32();
                    break;
                case 2:
                    message.reason = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateMerchantOnlineRequest {
        return UpdateMerchantOnlineRequest.deserialize(bytes);
    }
}
export class UpdateMerchantBusinessHourRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        businessHours?: BusinessHourModel[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("businessHours" in data && data.businessHours != undefined) {
                this.businessHours = data.businessHours;
            }
        }
    }
    get businessHours() {
        return pb_1.Message.getRepeatedWrapperField(this, BusinessHourModel, 11) as BusinessHourModel[];
    }
    set businessHours(value: BusinessHourModel[]) {
        pb_1.Message.setRepeatedWrapperField(this, 11, value);
    }
    static fromObject(data: {
        businessHours?: ReturnType<typeof BusinessHourModel.prototype.toObject>[];
    }): UpdateMerchantBusinessHourRequest {
        const message = new UpdateMerchantBusinessHourRequest({});
        if (data.businessHours != null) {
            message.businessHours = data.businessHours.map(item => BusinessHourModel.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            businessHours?: ReturnType<typeof BusinessHourModel.prototype.toObject>[];
        } = {};
        if (this.businessHours != null) {
            data.businessHours = this.businessHours.map((item: BusinessHourModel) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.businessHours.length)
            writer.writeRepeatedMessage(11, this.businessHours, (item: BusinessHourModel) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UpdateMerchantBusinessHourRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UpdateMerchantBusinessHourRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    reader.readMessage(message.businessHours, () => pb_1.Message.addToRepeatedWrapperField(message, 11, BusinessHourModel.deserialize(reader), BusinessHourModel));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UpdateMerchantBusinessHourRequest {
        return UpdateMerchantBusinessHourRequest.deserialize(bytes);
    }
}
