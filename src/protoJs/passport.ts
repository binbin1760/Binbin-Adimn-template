/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: passport.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./enums";
import * as pb_1 from "google-protobuf";
export class PassportByMobileRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        mobile?: string;
        captcha?: string;
        clientType?: dependency_1.ClientType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("mobile" in data && data.mobile != undefined) {
                this.mobile = data.mobile;
            }
            if ("captcha" in data && data.captcha != undefined) {
                this.captcha = data.captcha;
            }
            if ("clientType" in data && data.clientType != undefined) {
                this.clientType = data.clientType;
            }
        }
    }
    get mobile() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set mobile(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get captcha() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set captcha(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get clientType() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.ClientType._ClientType_UNSPECIFIED) as dependency_1.ClientType;
    }
    set clientType(value: dependency_1.ClientType) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        mobile?: string;
        captcha?: string;
        clientType?: dependency_1.ClientType;
    }): PassportByMobileRequest {
        const message = new PassportByMobileRequest({});
        if (data.mobile != null) {
            message.mobile = data.mobile;
        }
        if (data.captcha != null) {
            message.captcha = data.captcha;
        }
        if (data.clientType != null) {
            message.clientType = data.clientType;
        }
        return message;
    }
    toObject() {
        const data: {
            mobile?: string;
            captcha?: string;
            clientType?: dependency_1.ClientType;
        } = {};
        if (this.mobile != null) {
            data.mobile = this.mobile;
        }
        if (this.captcha != null) {
            data.captcha = this.captcha;
        }
        if (this.clientType != null) {
            data.clientType = this.clientType;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.mobile.length)
            writer.writeString(1, this.mobile);
        if (this.captcha.length)
            writer.writeString(2, this.captcha);
        if (this.clientType != dependency_1.ClientType._ClientType_UNSPECIFIED)
            writer.writeEnum(3, this.clientType);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PassportByMobileRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PassportByMobileRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.mobile = reader.readString();
                    break;
                case 2:
                    message.captcha = reader.readString();
                    break;
                case 3:
                    message.clientType = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PassportByMobileRequest {
        return PassportByMobileRequest.deserialize(bytes);
    }
}
export class PassportResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        token?: string;
    }): PassportResponse {
        const message = new PassportResponse({});
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PassportResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PassportResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PassportResponse {
        return PassportResponse.deserialize(bytes);
    }
}
