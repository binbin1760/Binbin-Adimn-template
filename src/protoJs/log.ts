/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: server/log.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
// @ts-nocheck
import * as dependency_1 from "./enums";
import * as dependency_2 from "./page";
import * as dependency_3 from "./payload";
import * as pb_1 from "google-protobuf";
// @ts-nocheck
export class SysLogPageRequest extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          blurry?: string;
          type?: dependency_1.LogErrorType;
          range?: dependency_3.TimeRange;
          page?: dependency_2.PagerRequest;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("blurry" in data && data.blurry != undefined) {
        this.blurry = data.blurry;
      }
      if ("type" in data && data.type != undefined) {
        this.type = data.type;
      }
      if ("range" in data && data.range != undefined) {
        this.range = data.range;
      }
      if ("page" in data && data.page != undefined) {
        this.page = data.page;
      }
    }
  }
  get blurry() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set blurry(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get type() {
    return pb_1.Message.getFieldWithDefault(
      this,
      2,
      dependency_1.LogErrorType._LogErrorType_UNSPECIFIED
    ) as dependency_1.LogErrorType;
  }
  set type(value: dependency_1.LogErrorType) {
    pb_1.Message.setField(this, 2, value);
  }
  get range() {
    return pb_1.Message.getWrapperField(
      this,
      dependency_3.TimeRange,
      3
    ) as dependency_3.TimeRange;
  }
  set range(value: dependency_3.TimeRange) {
    pb_1.Message.setWrapperField(this, 3, value);
  }
  get hasRange() {
    return pb_1.Message.getField(this, 3) != null;
  }
  get page() {
    return pb_1.Message.getWrapperField(
      this,
      dependency_2.PagerRequest,
      4
    ) as dependency_2.PagerRequest;
  }
  set page(value: dependency_2.PagerRequest) {
    pb_1.Message.setWrapperField(this, 4, value);
  }
  get hasPage() {
    return pb_1.Message.getField(this, 4) != null;
  }
  static fromObject(data: {
    blurry?: string;
    type?: dependency_1.LogErrorType;
    range?: ReturnType<typeof dependency_3.TimeRange.prototype.toObject>;
    page?: ReturnType<typeof dependency_2.PagerRequest.prototype.toObject>;
  }): SysLogPageRequest {
    const message = new SysLogPageRequest({});
    if (data.blurry != null) {
      message.blurry = data.blurry;
    }
    if (data.type != null) {
      message.type = data.type;
    }
    if (data.range != null) {
      message.range = dependency_3.TimeRange.fromObject(data.range);
    }
    if (data.page != null) {
      message.page = dependency_2.PagerRequest.fromObject(data.page);
    }
    return message;
  }
  toObject() {
    const data: {
      blurry?: string;
      type?: dependency_1.LogErrorType;
      range?: ReturnType<typeof dependency_3.TimeRange.prototype.toObject>;
      page?: ReturnType<typeof dependency_2.PagerRequest.prototype.toObject>;
    } = {};
    if (this.blurry != null) {
      data.blurry = this.blurry;
    }
    if (this.type != null) {
      data.type = this.type;
    }
    if (this.range != null) {
      data.range = this.range.toObject();
    }
    if (this.page != null) {
      data.page = this.page.toObject();
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.blurry.length) writer.writeString(1, this.blurry);
    if (this.type != dependency_1.LogErrorType._LogErrorType_UNSPECIFIED)
      writer.writeEnum(2, this.type);
    if (this.hasRange)
      writer.writeMessage(3, this.range, () => this.range.serialize(writer));
    if (this.hasPage)
      writer.writeMessage(4, this.page, () => this.page.serialize(writer));
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SysLogPageRequest {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new SysLogPageRequest();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.blurry = reader.readString();
          break;
        case 2:
          message.type = reader.readEnum();
          break;
        case 3:
          reader.readMessage(
            message.range,
            () => (message.range = dependency_3.TimeRange.deserialize(reader))
          );
          break;
        case 4:
          reader.readMessage(
            message.page,
            () => (message.page = dependency_2.PagerRequest.deserialize(reader))
          );
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): SysLogPageRequest {
    return SysLogPageRequest.deserialize(bytes);
  }
}
export class SysLogPageResponse extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          page?: dependency_2.PagerResponse;
          raws?: SysLogViewModel[];
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [2],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("page" in data && data.page != undefined) {
        this.page = data.page;
      }
      if ("raws" in data && data.raws != undefined) {
        this.raws = data.raws;
      }
    }
  }
  get page() {
    return pb_1.Message.getWrapperField(
      this,
      dependency_2.PagerResponse,
      1
    ) as dependency_2.PagerResponse;
  }
  set page(value: dependency_2.PagerResponse) {
    pb_1.Message.setWrapperField(this, 1, value);
  }
  get hasPage() {
    return pb_1.Message.getField(this, 1) != null;
  }
  get raws() {
    return pb_1.Message.getRepeatedWrapperField(
      this,
      SysLogViewModel,
      2
    ) as SysLogViewModel[];
  }
  set raws(value: SysLogViewModel[]) {
    pb_1.Message.setRepeatedWrapperField(this, 2, value);
  }
  static fromObject(data: {
    page?: ReturnType<typeof dependency_2.PagerResponse.prototype.toObject>;
    raws?: ReturnType<typeof SysLogViewModel.prototype.toObject>[];
  }): SysLogPageResponse {
    const message = new SysLogPageResponse({});
    if (data.page != null) {
      message.page = dependency_2.PagerResponse.fromObject(data.page);
    }
    if (data.raws != null) {
      message.raws = data.raws.map((item) => SysLogViewModel.fromObject(item));
    }
    return message;
  }
  toObject() {
    const data: {
      page?: ReturnType<typeof dependency_2.PagerResponse.prototype.toObject>;
      raws?: ReturnType<typeof SysLogViewModel.prototype.toObject>[];
    } = {};
    if (this.page != null) {
      data.page = this.page.toObject();
    }
    if (this.raws != null) {
      data.raws = this.raws.map((item: SysLogViewModel) => item.toObject());
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.hasPage)
      writer.writeMessage(1, this.page, () => this.page.serialize(writer));
    if (this.raws.length)
      writer.writeRepeatedMessage(2, this.raws, (item: SysLogViewModel) =>
        item.serialize(writer)
      );
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(
    bytes: Uint8Array | pb_1.BinaryReader
  ): SysLogPageResponse {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new SysLogPageResponse();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          reader.readMessage(
            message.page,
            () =>
              (message.page = dependency_2.PagerResponse.deserialize(reader))
          );
          break;
        case 2:
          reader.readMessage(message.raws, () =>
            pb_1.Message.addToRepeatedWrapperField(
              message,
              2,
              SysLogViewModel.deserialize(reader),
              SysLogViewModel
            )
          );
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): SysLogPageResponse {
    return SysLogPageResponse.deserialize(bytes);
  }
}
export class SysLogViewModel extends pb_1.Message {
  #one_of_decls: number[][] = [];
  constructor(
    data?:
      | any[]
      | {
          id?: string;
          type?: dependency_1.LogErrorType;
          username?: string;
          uri?: string;
          httpMethod?: string;
          className?: string;
          classMethod?: string;
          description?: string;
          detail?: string;
          args?: string;
          ip?: string;
          address?: string;
          duration?: number;
          occurAt?: number;
        }
  ) {
    super();
    pb_1.Message.initialize(
      this,
      Array.isArray(data) ? data : [],
      0,
      -1,
      [],
      this.#one_of_decls
    );
    if (!Array.isArray(data) && typeof data == "object") {
      if ("id" in data && data.id != undefined) {
        this.id = data.id;
      }
      if ("type" in data && data.type != undefined) {
        this.type = data.type;
      }
      if ("username" in data && data.username != undefined) {
        this.username = data.username;
      }
      if ("uri" in data && data.uri != undefined) {
        this.uri = data.uri;
      }
      if ("httpMethod" in data && data.httpMethod != undefined) {
        this.httpMethod = data.httpMethod;
      }
      if ("className" in data && data.className != undefined) {
        this.className = data.className;
      }
      if ("classMethod" in data && data.classMethod != undefined) {
        this.classMethod = data.classMethod;
      }
      if ("description" in data && data.description != undefined) {
        this.description = data.description;
      }
      if ("detail" in data && data.detail != undefined) {
        this.detail = data.detail;
      }
      if ("args" in data && data.args != undefined) {
        this.args = data.args;
      }
      if ("ip" in data && data.ip != undefined) {
        this.ip = data.ip;
      }
      if ("address" in data && data.address != undefined) {
        this.address = data.address;
      }
      if ("duration" in data && data.duration != undefined) {
        this.duration = data.duration;
      }
      if ("occurAt" in data && data.occurAt != undefined) {
        this.occurAt = data.occurAt;
      }
    }
  }
  get id() {
    return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
  }
  set id(value: string) {
    pb_1.Message.setField(this, 1, value);
  }
  get type() {
    return pb_1.Message.getFieldWithDefault(
      this,
      2,
      dependency_1.LogErrorType._LogErrorType_UNSPECIFIED
    ) as dependency_1.LogErrorType;
  }
  set type(value: dependency_1.LogErrorType) {
    pb_1.Message.setField(this, 2, value);
  }
  get username() {
    return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
  }
  set username(value: string) {
    pb_1.Message.setField(this, 3, value);
  }
  get uri() {
    return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
  }
  set uri(value: string) {
    pb_1.Message.setField(this, 4, value);
  }
  get httpMethod() {
    return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
  }
  set httpMethod(value: string) {
    pb_1.Message.setField(this, 5, value);
  }
  get className() {
    return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
  }
  set className(value: string) {
    pb_1.Message.setField(this, 6, value);
  }
  get classMethod() {
    return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
  }
  set classMethod(value: string) {
    pb_1.Message.setField(this, 7, value);
  }
  get description() {
    return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
  }
  set description(value: string) {
    pb_1.Message.setField(this, 8, value);
  }
  get detail() {
    return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
  }
  set detail(value: string) {
    pb_1.Message.setField(this, 9, value);
  }
  get args() {
    return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
  }
  set args(value: string) {
    pb_1.Message.setField(this, 10, value);
  }
  get ip() {
    return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
  }
  set ip(value: string) {
    pb_1.Message.setField(this, 11, value);
  }
  get address() {
    return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
  }
  set address(value: string) {
    pb_1.Message.setField(this, 12, value);
  }
  get duration() {
    return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
  }
  set duration(value: number) {
    pb_1.Message.setField(this, 13, value);
  }
  get occurAt() {
    return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
  }
  set occurAt(value: number) {
    pb_1.Message.setField(this, 14, value);
  }
  static fromObject(data: {
    id?: string;
    type?: dependency_1.LogErrorType;
    username?: string;
    uri?: string;
    httpMethod?: string;
    className?: string;
    classMethod?: string;
    description?: string;
    detail?: string;
    args?: string;
    ip?: string;
    address?: string;
    duration?: number;
    occurAt?: number;
  }): SysLogViewModel {
    const message = new SysLogViewModel({});
    if (data.id != null) {
      message.id = data.id;
    }
    if (data.type != null) {
      message.type = data.type;
    }
    if (data.username != null) {
      message.username = data.username;
    }
    if (data.uri != null) {
      message.uri = data.uri;
    }
    if (data.httpMethod != null) {
      message.httpMethod = data.httpMethod;
    }
    if (data.className != null) {
      message.className = data.className;
    }
    if (data.classMethod != null) {
      message.classMethod = data.classMethod;
    }
    if (data.description != null) {
      message.description = data.description;
    }
    if (data.detail != null) {
      message.detail = data.detail;
    }
    if (data.args != null) {
      message.args = data.args;
    }
    if (data.ip != null) {
      message.ip = data.ip;
    }
    if (data.address != null) {
      message.address = data.address;
    }
    if (data.duration != null) {
      message.duration = data.duration;
    }
    if (data.occurAt != null) {
      message.occurAt = data.occurAt;
    }
    return message;
  }
  toObject() {
    const data: {
      id?: string;
      type?: dependency_1.LogErrorType;
      username?: string;
      uri?: string;
      httpMethod?: string;
      className?: string;
      classMethod?: string;
      description?: string;
      detail?: string;
      args?: string;
      ip?: string;
      address?: string;
      duration?: number;
      occurAt?: number;
    } = {};
    if (this.id != null) {
      data.id = this.id;
    }
    if (this.type != null) {
      data.type = this.type;
    }
    if (this.username != null) {
      data.username = this.username;
    }
    if (this.uri != null) {
      data.uri = this.uri;
    }
    if (this.httpMethod != null) {
      data.httpMethod = this.httpMethod;
    }
    if (this.className != null) {
      data.className = this.className;
    }
    if (this.classMethod != null) {
      data.classMethod = this.classMethod;
    }
    if (this.description != null) {
      data.description = this.description;
    }
    if (this.detail != null) {
      data.detail = this.detail;
    }
    if (this.args != null) {
      data.args = this.args;
    }
    if (this.ip != null) {
      data.ip = this.ip;
    }
    if (this.address != null) {
      data.address = this.address;
    }
    if (this.duration != null) {
      data.duration = this.duration;
    }
    if (this.occurAt != null) {
      data.occurAt = this.occurAt;
    }
    return data;
  }
  serialize(): Uint8Array;
  serialize(w: pb_1.BinaryWriter): void;
  serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
    const writer = w || new pb_1.BinaryWriter();
    if (this.id.length) writer.writeString(1, this.id);
    if (this.type != dependency_1.LogErrorType._LogErrorType_UNSPECIFIED)
      writer.writeEnum(2, this.type);
    if (this.username.length) writer.writeString(3, this.username);
    if (this.uri.length) writer.writeString(4, this.uri);
    if (this.httpMethod.length) writer.writeString(5, this.httpMethod);
    if (this.className.length) writer.writeString(6, this.className);
    if (this.classMethod.length) writer.writeString(7, this.classMethod);
    if (this.description.length) writer.writeString(8, this.description);
    if (this.detail.length) writer.writeString(9, this.detail);
    if (this.args.length) writer.writeString(10, this.args);
    if (this.ip.length) writer.writeString(11, this.ip);
    if (this.address.length) writer.writeString(12, this.address);
    if (this.duration != 0) writer.writeUint64(13, this.duration);
    if (this.occurAt != 0) writer.writeInt64(14, this.occurAt);
    if (!w) return writer.getResultBuffer();
  }
  static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SysLogViewModel {
    const reader =
        bytes instanceof pb_1.BinaryReader
          ? bytes
          : new pb_1.BinaryReader(bytes),
      message = new SysLogViewModel();
    while (reader.nextField()) {
      if (reader.isEndGroup()) break;
      switch (reader.getFieldNumber()) {
        case 1:
          message.id = reader.readString();
          break;
        case 2:
          message.type = reader.readEnum();
          break;
        case 3:
          message.username = reader.readString();
          break;
        case 4:
          message.uri = reader.readString();
          break;
        case 5:
          message.httpMethod = reader.readString();
          break;
        case 6:
          message.className = reader.readString();
          break;
        case 7:
          message.classMethod = reader.readString();
          break;
        case 8:
          message.description = reader.readString();
          break;
        case 9:
          message.detail = reader.readString();
          break;
        case 10:
          message.args = reader.readString();
          break;
        case 11:
          message.ip = reader.readString();
          break;
        case 12:
          message.address = reader.readString();
          break;
        case 13:
          message.duration = reader.readUint64();
          break;
        case 14:
          message.occurAt = reader.readInt64();
          break;
        default:
          reader.skipField();
      }
    }
    return message;
  }
  serializeBinary(): Uint8Array {
    return this.serialize();
  }
  static deserializeBinary(bytes: Uint8Array): SysLogViewModel {
    return SysLogViewModel.deserialize(bytes);
  }
}
